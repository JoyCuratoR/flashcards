<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swedish Flashcards</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }

        .card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .flashcard {
            cursor: pointer;
            min-height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }

        .card-image {
            max-width: 300px;
            max-height: 200px;
            margin: 10px 0;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 20px 0;
        }

        .file-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 20px 0;
            padding: 20px;
            background-color: #e9ecef;
            border-radius: 8px;
        }

        button {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            background-color: #007bff;
            color: white;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        .form-group {
            margin: 10px 0;
        }

        input, textarea {
            width: 100%;
            padding: 8px;
            margin-top: 4px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .stats {
            text-align: center;
            margin-bottom: 20px;
        }

        #fileHandle {
            font-style: italic;
            color: #666;
            margin: 10px 0;
            text-align: center;
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div id="app">
        <div class="stats">
            <h2>Swedish Flashcards</h2>
            <p>Cards due for review: <span id="dueCount">0</span></p>
        </div>

        <div class="file-controls">
            <button onclick="openFile()">Open Flashcards File</button>
            <button onclick="createNewFile()">Create New Flashcards File</button>
            <button onclick="saveFile()" id="saveButton" disabled>Save Changes</button>
        </div>
        <div id="fileHandle">No file selected</div>

        <div id="flashcardContainer" class="card flashcard">
            <div id="cardFront">
                <h3 id="swedishWord"></h3>
                <p id="swedishSentence"></p>
                <p id="visualDesc"></p>
                <img id="cardImage" class="card-image hidden" alt="Card image">
            </div>
            <div id="cardBack" class="hidden">
                <p id="englishWord"></p>
                <p id="sentenceTranslation"></p>
            </div>
        </div>

        <div class="controls">
            <button onclick="showAnswer()">Show Answer</button>
            <button onclick="rateCard(1)" class="hidden">Again</button>
            <button onclick="rateCard(2)" class="hidden">Hard</button>
            <button onclick="rateCard(3)" class="hidden">Good</button>
            <button onclick="rateCard(4)" class="hidden">Easy</button>
        </div>

        <div class="card">
            <h3>Add New Card</h3>
            <div class="form-group">
                <label for="swedish">Swedish:</label>
                <input type="text" id="swedish" required>
            </div>
            <div class="form-group">
                <label for="english">English:</label>
                <input type="text" id="english" required>
            </div>
            <div class="form-group">
                <label for="visual">Visual Description:</label>
                <input type="text" id="visual">
            </div>
            <div class="form-group">
                <label for="cardImageInput">Card Image:</label>
                <input type="file" id="cardImageInput" accept="image/*">
            </div>
            <div class="form-group">
                <label for="sentence">Example Sentence:</label>
                <textarea id="sentence"></textarea>
            </div>
            <div class="form-group">
                <label for="translation">Sentence Translation:</label>
                <textarea id="translation"></textarea>
            </div>
            <button onclick="addCard()">Add Card</button>
        </div>
    </div>

    <script>
        class FlashcardSystem {
            constructor() {
                this.cards = [];
                this.currentCard = null;
                this.fileHandle = null;
                this.hasUnsavedChanges = false;
                
                const savedState = localStorage.getItem('flashcardState');
                if (savedState) {
                    try {
                        const state = JSON.parse(savedState);
                        this.cards = state.cards;
                    } catch (e) {
                        console.error('Error loading saved state:', e);
                    }
                }
            }

            saveState() {
                try {
                    localStorage.setItem('flashcardState', JSON.stringify({
                        cards: this.cards
                    }));
                } catch (e) {
                    console.error('Error saving state:', e);
                }
            }

            async addCard(card) {
                try {
                    // Create the new card object first
                    const newCard = {
                        id: Date.now().toString(),
                        ...card,
                        nextReview: new Date().toISOString(),
                        interval: 1,
                        reviewCount: 0
                    };
					
					// Handle image conversion separately
                    if (card.imageFile) {
                        try {
                            newCard.imageData = await this.imageToBase64(card.imageFile);
                        } catch (e) {
                            console.error('Error converting image:', e);
                            alert('Error processing image. Card will be added without image.');
                        }
                    }
					
                // Remove the File object
                    delete newCard.imageFile;
                    
                    // Add the card and update state
                    this.cards.push(newCard);
                    this.hasUnsavedChanges = true;
                    this.saveState();
                    document.getElementById('saveButton').disabled = false;
                    return true; // Indicate success
                } catch (e) {
                    console.error('Error adding card:', e);
                    alert('Error adding card. Please try again.');
                    return false;
                }

            imageToBase64(file) {
                return new Promise((resolve, reject) => {
                    if (!file) {
                        resolve(null);
                        return;
                    }

                    if (file.size > 5000000) { // 5MB limit
                        reject(new Error('Image file is too large (max 5MB)'));
                        return;
                    }
			const reader = new FileReader();
                    
                    reader.onload = () => {
                        resolve(reader.result);
                    };
					
			reader.onerror = (error) => {
                        console.error('FileReader error:', error);
                        reject(new Error('Error reading image file'));
                    };

                    try {
                        reader.readAsDataURL(file);
                    } catch (e) {
                        console.error('Error starting file read:', e);
                        reject(e);
                    }
                });
            }
			
            getDueCards() {
                const now = new Date();
                return this.cards.filter(card => new Date(card.nextReview) <= now);
            }

            updateCardInterval(cardId, performance) {
                const card = this.cards.find(c => c.id === cardId);
                if (!card) return;

                const intervals = {
                    1: 1,     // Again: 1 day
                    2: card.interval * 1.2,  // Hard: slight increase
                    3: card.interval * 1.5,  // Good: moderate increase
                    4: card.interval * 2     // Easy: double the interval
                };

                const newInterval = intervals[performance] || card.interval;
                const nextReview = new Date();
                nextReview.setDate(nextReview.getDate() + Math.round(newInterval));

                card.interval = newInterval;
                card.nextReview = nextReview.toISOString();
                card.reviewCount++;

                this.hasUnsavedChanges = true;
                this.saveState();
                document.getElementById('saveButton').disabled = false;
            }
        }

        const system = new FlashcardSystem();
        let isShowingAnswer = false;

        // File System Functions
        async function openFile() {
            try {
                const [fileHandle] = await window.showOpenFilePicker({
                    types: [{
                        description: 'Flashcards JSON File',
                        accept: {'application/json': ['.json']},
                    }],
                });
                
                system.fileHandle = fileHandle;
                document.getElementById('fileHandle').textContent = 
                    `Current file: ${fileHandle.name}`;
                
                const file = await fileHandle.getFile();
                const contents = await file.text();
                system.cards = JSON.parse(contents);
                system.saveState();
                
                document.getElementById('saveButton').disabled = false;
                updateUI();
            } catch (err) {
                if (err.name !== 'AbortError') {
                    console.error('Error opening file:', err);
                    alert('Error opening file');
                }
            }
        }

        async function createNewFile() {
            try {
                const fileHandle = await window.showSaveFilePicker({
                    types: [{
                        description: 'Flashcards JSON File',
                        accept: {'application/json': ['.json']},
                    }],
                    suggestedName: 'flashcards.json'
                });
                
                system.fileHandle = fileHandle;
                system.cards = [];
                system.saveState();
                document.getElementById('fileHandle').textContent = 
                    `Current file: ${fileHandle.name}`;
                document.getElementById('saveButton').disabled = false;
                
                await saveFile();
                updateUI();
            } catch (err) {
                if (err.name !== 'AbortError') {
                    console.error('Error creating file:', err);
                    alert('Error creating file');
                }
            }
        }

        async function saveFile() {
            try {
                if (!system.fileHandle) {
                    throw new Error('No file selected');
                }

                const contents = JSON.stringify(system.cards, null, 2);
                const writable = await system.fileHandle.createWritable();
                await writable.write(contents);
                await writable.close();
                
                system.hasUnsavedChanges = false;
                document.getElementById('saveButton').disabled = true;
            } catch (err) {
                console.error('Error saving file:', err);
                alert('Error saving file');
            }
        }

        // UI Functions
        function updateUI() {
            const dueCards = system.getDueCards();
            document.getElementById('dueCount').textContent = dueCards.length;

            if (dueCards.length > 0) {
                system.currentCard = dueCards[Math.floor(Math.random() * dueCards.length)];
                showCard();
            } else {
                document.getElementById('swedishWord').textContent = "No cards due for review!";
                document.getElementById('swedishSentence').textContent = "";
                document.getElementById('visualDesc').textContent = "";
                document.getElementById('cardImage').classList.add('hidden');
                document.getElementById('cardBack').classList.add('hidden');
                hideAnswerButtons();
            }
        }

        function showCard() {
            const card = system.currentCard;
            
            // Front of card
            document.getElementById('swedishWord').textContent = card.swedish;
            document.getElementById('swedishSentence').textContent = card.sentence || '';
            document.getElementById('visualDesc').textContent = card.visual || '';
            
            // Handle image
            const cardImage = document.getElementById('cardImage');
            if (card.imageData) {
                cardImage.src = card.imageData;
                cardImage.classList.remove('hidden');
            } else {
                cardImage.classList.add('hidden');
            }
            
            // Back of card
            document.getElementById('englishWord').textContent = `English: ${card.english}`;
            document.getElementById('sentenceTranslation').textContent = 
                card.translation ? `Translation: ${card.translation}` : '';
            
            document.getElementById('cardBack').classList.add('hidden');
            document.querySelector('button[onclick="showAnswer()"]').style.display = "block";
            hideAnswerButtons();
            isShowingAnswer = false;
        }

        function showAnswer() {
            document.getElementById('cardBack').classList.remove('hidden');
            document.querySelector('button[onclick="showAnswer()"]').style.display = "none";
            showAnswerButtons();
            isShowingAnswer = true;
        }

        function hideAnswerButtons() {
            const buttons = document.querySelectorAll('button[onclick^="rateCard"]');
            buttons.forEach(button => button.classList.add('hidden'));
        }

        function showAnswerButtons() {
            const buttons = document.querySelectorAll('button[onclick^="rateCard"]');
            buttons.forEach(button => button.classList.remove('hidden'));
        }

        function rateCard(rating) {
            system.updateCardInterval(system.currentCard.id, rating);
            updateUI();
        }

        async function addCard() {
            try {
                const swedish = document.getElementById('swedish').value.trim();
                const english = document.getElementById('english').value.trim();
                const visual = document.getElementById('visual').value.trim();
                const sentence = document.getElementById('sentence').value.trim();
                const translation = document.getElementById('translation').value.trim();
                const imageInput = document.getElementById('cardImageInput');
                const imageFile = imageInput.files.length > 0 ? imageInput.files[0] : null;

                if (!swedish || !english) {
                    alert('Swedish and English fields are required!');
                    return;
                }
		const addButton = event.target;
                const originalText = addButton.textContent;
                addButton.textContent = 'Adding...';
                addButton.disabled = true;

                const success = await system.addCard({
                    swedish,
                    english,
                    visual,
                    sentence,
                    translation,
                    imageFile
                });

                if (success) {
                    // Clear form
                    document.getElementById('swedish').value = '';
                    document.getElementById('english').value = '';
                    document.getElementById('visual').value = '';
                    document.getElementById('sentence').value = '';
                    document.getElementById('translation').value = '';
                    document.getElementById('cardImageInput').value = '';

                    updateUI();
                }

                // Restore button state
                addButton.textContent = originalText;
                addButton.disabled = false;

            } catch (e) {
                console.error('Error in addCard:', e);
                alert('Error adding card. Please try again.');
            }
        }

        // Handle beforeunload to warn about unsaved changes
        window.addEventListener('beforeunload', (e) => {
            if (system.hasUnsavedChanges) {
                e.preventDefault();
                e.returnValue = '';
            }
        });

        // Initialize the UI
        updateUI();
    </script>
</body>
</html>