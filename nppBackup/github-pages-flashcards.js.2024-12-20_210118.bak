// package.json
{
  "name": "swedish-flashcards",
  "version": "1.0.0",
  "homepage": "https://your-username.github.io/swedish-flashcards",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build",
    "start": "react-scripts start",
    "build": "react-scripts build"
  },
  "devDependencies": {
    "gh-pages": "^6.0.0"
  }
}

// src/services/storage.js
export const storage = {
  saveFlashcards(flashcards) {
    localStorage.setItem('swedishFlashcards', JSON.stringify(flashcards));
  },

  getFlashcards() {
    const saved = localStorage.getItem('swedishFlashcards');
    return saved ? JSON.parse(saved) : [];
  },

  exportData() {
    const flashcards = this.getFlashcards();
    const blob = new Blob([JSON.stringify(flashcards, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'swedish-flashcards-backup.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  },

  async importData(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const flashcards = JSON.parse(e.target.result);
          this.saveFlashcards(flashcards);
          resolve(flashcards);
        } catch (error) {
          reject(new Error('Invalid file format'));
        }
      };
      reader.onerror = () => reject(new Error('Failed to read file'));
      reader.readAsText(file);
    });
  }
};

// Add to your FlashcardSystem.jsx component
function ImportExportButtons() {
  const fileInputRef = React.useRef(null);

  const handleImport = async (event) => {
    const file = event.target.files?.[0];
    if (file) {
      try {
        const flashcards = await storage.importData(file);
        setWords(flashcards);
      } catch (error) {
        alert('Error importing flashcards: ' + error.message);
      }
    }
  };

  return (
    <div className="flex gap-2 mt-4">
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleImport}
        accept=".json"
        className="hidden"
      />
      <Button
        onClick={() => storage.exportData()}
        variant="outline"
        className="flex items-center"
      >
        Export Flashcards
      </Button>
      <Button
        onClick={() => fileInputRef.current?.click()}
        variant="outline"
        className="flex items-center"
      >
        Import Flashcards
      </Button>
    </div>
  );
}
